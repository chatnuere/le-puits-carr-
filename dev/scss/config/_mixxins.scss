@function em($pixels, $context: $base-font-size) {
  @return #{$pixels/$context}em;
}

@function parseInt($n) { /* 2 */
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px: (); /* 3 */
  $rem: (); /* 3 */
  $base: parseInt($base-font-size);

  @each $value in $values { /* 4 */

    @if $value == 0 or $value == auto { /* 5 */
      $px: append($px, $value);
      $rem: append($rem, $value);
    } @else {
      $unit: unit($value); /* 6 */
      $val: parseInt($value); /* 6 */

      @if $unit == "px" { /* 7 */
        $px: append($px, $value);
        $rem: append($rem, ($val / $base + rem));
      }

      @if $unit == "rem" { /* 7 */
        $px: append($px, ($val * $base + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem { /* 8 */
    #{$property}: $px; /* 9 */
  } @else {
    #{$property}: $px; /* 9 */
    #{$property}: $rem; /* 9 */
  }
}

@mixin em($property, $values, $context: $base-font-size) {
  $em: (); /* 3 */
  $base: parseInt($context);

  @each $value in $values { /* 4 */

    @if $value == 0 or $value == auto { /* 5 */
      $em: append($em, $value);
    } @else {
      $unit: unit($value); /* 6 */
      $val: parseInt($value); /* 6 */

      @if $unit == "px" { /* 7 */
        $em: append($em, ($val / $base + em));
      }

      @if $unit == "em" { /* 7 */
        $em: append($em, $value);
      }
    }
  }

  #{$property}: $em; /* 9 */
}

@mixin opacity($value) {
  /* Theoretically for IE 8 & 9 (more valid) */
  /* ...but not required as filter works too */
  /* should come BEFORE filter */
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=50)";

  /* This works in IE 8 & 9 too */
  /* ... but also 5, 6, 7 */
  filter: alpha(opacity=($value * 100));

  /* Older than Firefox 0.9 */
  -moz-opacity: $value;

  /* Safari 1.x (pre WebKit!) */
  -khtml-opacity: $value;

  /* Modern!
  /* Firefox 0.9+, Safari 2?, Chrome any?
  /* Opera 9+, IE 9+ */
  opacity: $value;
}

// Find the greatest common factor of two integers

@function gcf($a, $b) {
  @if $b == 0 { @return $a; }
  @else { @return gcf($b, $a % $b); }
}

// Check if a list contains a value

@function contains($list, $value) {
  @if type-of($list) == list { @return not not index($list, $value); }
  @else { @return $list == $value; }
}

@mixin grid-build($units, $modifier: '') {

  /* Proportional units
     ========================================================================== */

  /*
   * Specify the proportional width of an object.
   * Primarily for, but not limited to, use with `.grid__cell` components.
   * Intentional redundancy build into each set of unit classes.
   */

  @each $n in $units {
    // Avoid creating rules like `.unit-12-12 {}`
    $x: $n - 1;

    @for $i from 1 through $x {
      // Initialize variables
      $i-r: 0;
      $n-r: 0;

      // Find the greatest common factor
      $g: gcf($i, $n);

      @if $g > 1 {
        // Reduced value of $i
        $i-r: $i/$g;
        // Reduced value of $n
        $n-r: $n/$g;
      }

      // Check if the reduced value of $n was also supplied in the list
      // of units to be built
      $canreduce: contains($units, $n-r);

      // Create units based on fractions
      .col-#{$i}-#{$n}#{$modifier} {
        // If this unit can be reduced then extend the previous rule
        @if $canreduce {
          @extend .col-#{$i-r}-#{$n-r}#{$modifier};
        }
          // Otherwise create a new % width
        @else {
          width: percentage($i / $n);
        }
      }
    }
  }
}
